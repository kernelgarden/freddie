defmodule Freddie.Security.Aes do
  @doc """
   bin = <<x::256>> = :crypto.hash(:sha256, "172466572034046511436791226934711873703432069795004017632441253309326062301215605166509617030081910778790707271828993346999802785383731372478810412486343932599321162418892409422968126053501677531721540458288379209543903503819670986576972800069062057643243326198270748794593073773432079700192505304831495641463")
   iex(20)> defmodule PKCS7 do
...(20)> def pad(data, block_size) do
...(20)> to_add = block_size - rem(byte_size(data), block_size)
...(20)> data <> String.duplicate(<<to_add>>, to_add)
...(20)> end
...(20)> end
{:module, PKCS7,
 <<70, 79, 82, 49, 0, 0, 5, 196, 66, 69, 65, 77, 65, 116, 85, 56, 0, 0, 0, 164,
   0, 0, 0, 20, 12, 69, 108, 105, 120, 105, 114, 46, 80, 75, 67, 83, 55, 8, 95,
   95, 105, 110, 102, 111, 95, 95, 7, ...>>, {:pad, 2}}
iex(21)> input = "eeeeeeeeeeeeeeee" |> PKCS7.pad(32)
<<101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
  101, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16>>
iex(22)> input
<<101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
  101, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16>>
iex(23)> byte_size(input)
32
iex(24)> :crypto.block_encrypt(:aes_ecb, bin, input)
<<252, 139, 77, 251, 146, 93, 145, 208, 253, 103, 31, 131, 50, 142, 126, 206,
  147, 243, 253, 92, 4, 76, 230, 24, 165, 148, 20, 27, 51, 39, 132, 241>>
iex(25)> encoded = :crypto.block_encrypt(:aes_ecb, bin, input)
<<252, 139, 77, 251, 146, 93, 145, 208, 253, 103, 31, 131, 50, 142, 126, 206,
  147, 243, 253, 92, 4, 76, 230, 24, 165, 148, 20, 27, 51, 39, 132, 241>>
iex(26)> decoded = :crypto.block_decrypt(:aes_ecb, bin, encoded)
<<101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
  101, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16>>
iex(27)> decoded
<<101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
  101, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16>>
iex(28)> input == decoded
true
  """
end
